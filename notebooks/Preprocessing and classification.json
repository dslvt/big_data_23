{"paragraphs":[{"title":"Creating Spark session","text":"import pyspark.sql.functions as F  \nfrom pyspark.sql import SparkSession\nfrom pyspark.ml import Pipeline\n\nspark = SparkSession.builder.appName(\"BDT Project\").master(\"local[*]\").config(\"hive.metastore.uris\", \"thrift://sandbox-hdp.hortonworks.com:9083\").config(\"spark.sql.catalogImplementation\",\"hive\").config(\"spark.sql.avro.compression.codec\", \"snappy\").config(\"spark.jars\", \"file:///usr/hdp/current/hive-client/lib/hive-metastore-1.2.1000.2.6.5.0-292.jar,file:///usr/hdp/current/hive-client/lib/hive-exec-1.2.1000.2.6.5.0-292.jar\").config(\"spark.jars.packages\",\"org.apache.spark:spark-avro_2.12:3.0.3\").enableHiveSupport().getOrCreate()\n\nsc = spark.sparkContext\nsc.setLogLevel(\"ERROR\")\n\nprint(sc)","user":"anonymous","dateUpdated":"2023-05-13T02:26:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<SparkContext master=local[*] appName=BDT Project>\n"}]},"apps":[],"jobName":"paragraph_1682603235447_1226849628","id":"20230427-134715_1991441117","dateCreated":"2023-04-27T13:47:15+0000","dateStarted":"2023-05-13T02:26:16+0000","dateFinished":"2023-05-13T02:26:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17768"},{"title":"Perform data sampling from EDA stage","text":"accidents = spark.read.format(\"avro\").table('projectdb.accidents')\naccidents.createOrReplaceTempView('accidents')\naccidents = accidents.withColumn(\"distance\", accidents[\"distance\"].cast(\"float\"))\naccidents = accidents.withColumn(\"humidity\", accidents[\"humidity\"].cast(\"float\"))\naccidents = accidents.withColumn(\"pressure\", accidents[\"pressure\"].cast(\"float\"))\naccidents = accidents.withColumn(\"visibility\", accidents[\"visibility\"].cast(\"float\"))\naccidents = accidents.withColumn(\"wind_chill\", accidents[\"wind_chill\"].cast(\"float\"))\naccidents = accidents.withColumn(\"temperature\", accidents[\"temperature\"].cast(\"float\"))\n\naccidents = accidents.withColumn(\"start_lat\", accidents[\"start_lat\"].cast(\"float\"))\naccidents = accidents.withColumn(\"start_lng\", accidents[\"start_lng\"].cast(\"float\"))\naccidents = accidents.withColumn(\"end_lat\", accidents[\"end_lat\"].cast(\"float\"))\naccidents = accidents.withColumn(\"end_lng\", accidents[\"end_lng\"].cast(\"float\"))\n\ndf_cleared = accidents.na.drop()\n\n\nfrac = float(50000)/889904\nsample = df_cleared.where(df_cleared.severity == 2).sample(fraction=frac, withReplacement=False, seed=42)\ndf_balanced = df_cleared.where(df_cleared.severity != 2).union(sample)","user":"anonymous","dateUpdated":"2023-05-13T02:26:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682603445732_-945921000","id":"20230427-135045_1248666607","dateCreated":"2023-04-27T13:50:45+0000","dateStarted":"2023-05-13T02:26:17+0000","dateFinished":"2023-05-13T02:26:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17769"},{"title":"Converting start_time and and_time columns to timestamp","text":"from pyspark.sql import functions as F\n\ndf_balanced = df_balanced.withColumn(\"start_time\", (F.col(\"start_time\")/1000).cast(\"timestamp\"))\ndf_balanced = df_balanced.withColumn(\"end_time\", (F.col(\"end_time\")/1000).cast(\"timestamp\"))","user":"anonymous","dateUpdated":"2023-05-13T02:26:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682604073721_-541001230","id":"20230427-140113_1694401632","dateCreated":"2023-04-27T14:01:13+0000","dateStarted":"2023-05-13T02:26:17+0000","dateFinished":"2023-05-13T02:26:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17770"},{"text":"df_balanced.select('start_time', 'end_time').show()","user":"anonymous","dateUpdated":"2023-05-13T02:26:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 0:>                                                          (0 + 1) / 1]\n\n                                                                                \n+-------------------+-------------------+\n|         start_time|           end_time|\n+-------------------+-------------------+\n|2016-02-09 18:20:58|2016-02-10 00:20:58|\n|2016-02-09 18:20:58|2016-02-10 00:20:58|\n|2016-02-10 06:18:49|2016-02-10 12:18:49|\n|2016-02-13 07:14:41|2016-02-13 13:14:41|\n|2016-02-15 20:46:40|2016-02-16 02:46:40|\n|2016-02-24 12:27:56|2016-02-24 18:27:56|\n|2016-02-24 12:27:57|2016-02-24 18:27:57|\n|2016-02-25 06:14:20|2016-02-25 12:14:20|\n|2016-02-25 06:14:20|2016-02-25 12:14:20|\n|2016-02-25 13:13:48|2016-02-25 19:13:48|\n|2016-02-25 13:13:48|2016-02-25 19:13:48|\n|2016-03-02 12:04:52|2016-03-02 18:04:52|\n|2016-03-02 17:14:51|2016-03-02 23:14:51|\n|2016-03-03 06:30:58|2016-03-03 12:30:58|\n|2016-03-03 18:49:39|2016-03-04 00:49:39|\n|2016-03-03 18:49:39|2016-03-04 00:49:39|\n|2016-03-04 05:57:38|2016-03-04 11:57:38|\n|2016-05-25 16:16:48|2016-05-25 22:16:48|\n|2016-06-06 17:58:16|2016-06-06 23:58:16|\n|2016-06-06 17:58:16|2016-06-06 23:58:16|\n+-------------------+-------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1682604771956_-455557971","id":"20230427-141251_1107505689","dateCreated":"2023-04-27T14:12:51+0000","dateStarted":"2023-05-13T02:26:21+0000","dateFinished":"2023-05-13T02:26:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17771"},{"title":"Datetime feature extraction","text":"df_balanced = df_balanced.withColumn(\"DayOfWeek\", F.dayofweek(\"start_time\"))\ndf_balanced = df_balanced.withColumn(\"Hour\", F.hour(\"start_time\"))","user":"anonymous","dateUpdated":"2023-05-13T02:26:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682604771409_-244715573","id":"20230427-141251_1518692462","dateCreated":"2023-04-27T14:12:51+0000","dateStarted":"2023-05-13T02:26:21+0000","dateFinished":"2023-05-13T02:26:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17772"},{"text":"df_balanced = df_balanced.withColumn('accident_duration', (F.unix_timestamp('End_Time') - F.unix_timestamp('Start_Time')))","user":"anonymous","dateUpdated":"2023-05-13T02:26:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682604770742_-1266993401","id":"20230427-141250_39208419","dateCreated":"2023-04-27T14:12:50+0000","dateStarted":"2023-05-13T02:26:24+0000","dateFinished":"2023-05-13T02:26:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17773"},{"title":"Importing additional data for feature extraction","text":"import pandas as pd\n\ncities = pd.read_csv('uscities.csv')\n# Sampling large cities\ncities = cities[cities['population'] >= 5000]\ncities.shape","user":"anonymous","dateUpdated":"2023-05-13T02:26:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"... (6631, 17)\n"}]},"apps":[],"jobName":"paragraph_1682603536175_1848415027","id":"20230427-135216_1693590488","dateCreated":"2023-04-27T13:52:16+0000","dateStarted":"2023-05-13T02:26:24+0000","dateFinished":"2023-05-13T02:26:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17774"},{"title":"Utility function for calculation distance between two points on sphere","text":"from math import atan\nfrom math import atan2\nfrom math import cos\nfrom math import radians\nfrom math import sin\nfrom math import sqrt\nfrom math import tan\n\n\ndef vincenty_inverse(coord1, coord2, maxIter=10, tol=10**-12):\n    a = 6378137.0  # radius at equator in meters (WGS-84)\n    f = 1 / 298.257223563  # flattening of the ellipsoid (WGS-84)\n    b = (1 - f) * a\n    \n    phi_1, L_1 = coord1  # (lat=L_?,lon=phi_?)\n    phi_2, L_2 = coord2\n    \n    u_1 = atan((1 - f) * tan(radians(phi_1)))\n    u_2 = atan((1 - f) * tan(radians(phi_2)))\n    \n    L = radians(L_2 - L_1)\n    \n    Lambda = L  # set initial value of lambda to L\n    \n    sin_u1 = sin(u_1)\n    cos_u1 = cos(u_1)\n    sin_u2 = sin(u_2)\n    cos_u2 = cos(u_2)\n    \n    # --- BEGIN ITERATIONS -----------------------------+\n    iters = 0\n    for i in range(0, maxIter):\n        iters += 1\n        \n        cos_lambda = cos(Lambda)\n        sin_lambda = sin(Lambda)\n        sin_sigma = sqrt(\n            (cos_u2 * sin(Lambda)) ** 2\n            + (cos_u1 * sin_u2 - sin_u1 * cos_u2 * cos_lambda) ** 2\n        ) + 1e-8\n        cos_sigma = sin_u1 * sin_u2 + cos_u1 * cos_u2 * cos_lambda\n        sigma = atan2(sin_sigma, cos_sigma)\n        sin_alpha = (cos_u1 * cos_u2 * sin_lambda) / sin_sigma\n        cos_sq_alpha = 1 - sin_alpha**2\n        cos2_sigma_m = cos_sigma - ((2 * sin_u1 * sin_u2) / cos_sq_alpha)\n        C = (f / 16) * cos_sq_alpha * (4 + f * (4 - 3 * cos_sq_alpha))\n        Lambda_prev = Lambda\n        Lambda = L + (1 - C) * f * sin_alpha * (\n            sigma\n            + C\n            * sin_sigma\n            * (cos2_sigma_m + C * cos_sigma * (-1 + 2 * cos2_sigma_m**2))\n        )\n        \n        # successful convergence\n        diff = abs(Lambda_prev - Lambda)\n        if diff <= tol:\n            break\n            \n    u_sq = cos_sq_alpha * ((a**2 - b**2) / b**2)\n    A = 1 + (u_sq / 16384) * (4096 + u_sq * (-768 + u_sq * (320 - 175 * u_sq)))\n    B = (u_sq / 1024) * (256 + u_sq * (-128 + u_sq * (74 - 47 * u_sq)))\n    delta_sig = (\n        B\n        * sin_sigma\n        * (\n            cos2_sigma_m\n            + 0.25\n            * B\n            * (\n                cos_sigma * (-1 + 2 * cos2_sigma_m**2)\n                - (1 / 6)\n                * B\n                * cos2_sigma_m\n                * (-3 + 4 * sin_sigma**2)\n                * (-3 + 4 * cos2_sigma_m**2)\n            )\n        )\n    )\n    \n    return b * A * (sigma - delta_sig)","user":"anonymous","dateUpdated":"2023-05-13T02:26:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682605504075_-866247035","id":"20230427-142504_802036256","dateCreated":"2023-04-27T14:25:04+0000","dateStarted":"2023-05-13T02:26:25+0000","dateFinished":"2023-05-13T02:26:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17775"},{"title":"Retrieving city coordinates","text":"cities_lat = cities['lat'].values\ncities_lng = cities['lng'].values\ncities_cor = list(zip(cities_lat, cities_lng))","user":"anonymous","dateUpdated":"2023-05-13T02:26:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682607560956_820032941","id":"20230427-145920_757540557","dateCreated":"2023-04-27T14:59:20+0000","dateStarted":"2023-05-13T02:26:25+0000","dateFinished":"2023-05-13T02:26:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17776"},{"title":"Retrieving accident start latitude","text":"start_lat = df_balanced.select('start_lat').toPandas()['start_lat'].tolist()","user":"anonymous","dateUpdated":"2023-05-13T02:26:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 1:>                                                          (0 + 8) / 8]\n\n[Stage 1:=======>                                                   (1 + 7) / 8]\n\n[Stage 1:==============>                                            (2 + 6) / 8]\n\n[Stage 1:======================>                                    (3 + 5) / 8]\n\n[Stage 1:=============================>                             (4 + 4) / 8]\n\n[Stage 1:====================================>                      (5 + 3) / 8]\n\n[Stage 1:============================================>              (6 + 2) / 8]\n\n[Stage 1:===================================================>       (7 + 1) / 8]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1682607807016_527191411","id":"20230427-150327_1819858477","dateCreated":"2023-04-27T15:03:27+0000","dateStarted":"2023-05-13T02:26:25+0000","dateFinished":"2023-05-13T02:27:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17777"},{"title":"Retrieving accident start longitude","text":"start_lng = df_balanced.select('start_lng').toPandas()['start_lng'].tolist()","user":"anonymous","dateUpdated":"2023-05-13T02:26:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 2:>                                                          (0 + 8) / 8]\n\n[Stage 2:=======>                                                   (1 + 7) / 8]\n\n[Stage 2:==============>                                            (2 + 6) / 8]\n\n[Stage 2:======================>                                    (3 + 5) / 8]\n\n[Stage 2:=============================>                             (4 + 4) / 8]\n\n[Stage 2:====================================>                      (5 + 3) / 8]\n\n[Stage 2:============================================>              (6 + 2) / 8]\n\n[Stage 2:===================================================>       (7 + 1) / 8]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1682607818741_185949785","id":"20230427-150338_1799996943","dateCreated":"2023-04-27T15:03:38+0000","dateStarted":"2023-05-13T02:26:26+0000","dateFinished":"2023-05-13T02:28:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17778"},{"title":"Retrieving accident end latitude","text":"end_lat = df_balanced.select('end_lat').toPandas()['end_lat'].tolist()","user":"anonymous","dateUpdated":"2023-05-13T02:26:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 3:>                                                          (0 + 8) / 8]\n\n[Stage 3:=======>                                                   (1 + 7) / 8]\n\n[Stage 3:==============>                                            (2 + 6) / 8]\n\n[Stage 3:=============================>                             (4 + 4) / 8]\n\n[Stage 3:====================================>                      (5 + 3) / 8]\n\n[Stage 3:============================================>              (6 + 2) / 8]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1682607832402_-439267177","id":"20230427-150352_287980420","dateCreated":"2023-04-27T15:03:52+0000","dateStarted":"2023-05-13T02:27:28+0000","dateFinished":"2023-05-13T02:29:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17779"},{"title":"Retrieving accident end longitude","text":"end_lng = df_balanced.select('end_lng').toPandas()['end_lng'].tolist()","user":"anonymous","dateUpdated":"2023-05-13T02:26:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 4:>                                                          (0 + 8) / 8]\n\n[Stage 4:=======>                                                   (1 + 7) / 8]\n\n[Stage 4:==============>                                            (2 + 6) / 8]\n\n[Stage 4:======================>                                    (3 + 5) / 8]\n\n[Stage 4:=============================>                             (4 + 4) / 8]\n\n[Stage 4:====================================>                      (5 + 3) / 8]\n\n[Stage 4:============================================>              (6 + 2) / 8]\n\n[Stage 4:===================================================>       (7 + 1) / 8]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1682607837138_-2129637661","id":"20230427-150357_1553133183","dateCreated":"2023-04-27T15:03:57+0000","dateStarted":"2023-05-13T02:28:32+0000","dateFinished":"2023-05-13T02:30:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17780"},{"title":"Calculating distances between start and end points of accident","text":"distances = []\nfor i in range(len(start_lng)):\n    distances.append(vincenty_inverse((start_lng[i], start_lat[i]), (end_lng[i], end_lat[i])))","user":"anonymous","dateUpdated":"2023-05-13T02:26:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682606299362_341985984","id":"20230427-143819_1225801556","dateCreated":"2023-04-27T14:38:19+0000","dateStarted":"2023-05-13T02:29:35+0000","dateFinished":"2023-05-13T02:30:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17781"},{"title":"Creating temporary df","text":"distances_df = spark.createDataFrame([(l,) for l in distances], ['accident_distance'])","user":"anonymous","dateUpdated":"2023-05-13T02:26:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682608471540_1215477069","id":"20230427-151431_1525882283","dateCreated":"2023-04-27T15:14:31+0000","dateStarted":"2023-05-13T02:30:41+0000","dateFinished":"2023-05-13T02:30:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17782"},{"title":"Creating temporary index to join dfs","text":"from pyspark.sql import Window\ndf_balanced = df_balanced.withColumn(\"row_idx\", F.row_number().over(Window.orderBy(F.monotonically_increasing_id())))\ndistances_df = distances_df.withColumn(\"row_idx\", F.row_number().over(Window.orderBy(F.monotonically_increasing_id())))","user":"anonymous","dateUpdated":"2023-05-13T02:26:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682609671620_711183464","id":"20230427-153431_1127532573","dateCreated":"2023-04-27T15:34:31+0000","dateStarted":"2023-05-13T02:30:43+0000","dateFinished":"2023-05-13T02:30:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17783"},{"title":"Joining original df with new data","text":"df_balanced = df_balanced.join(distances_df, df_balanced.row_idx == distances_df.row_idx).\\\n             drop(\"row_idx\")","user":"anonymous","dateUpdated":"2023-05-13T02:26:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682609460288_1697003735","id":"20230427-153100_1727388868","dateCreated":"2023-04-27T15:31:00+0000","dateStarted":"2023-05-13T02:30:44+0000","dateFinished":"2023-05-13T02:30:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17784"},{"title":"Building index for search nearest city","text":"from math import radians\nfrom sklearn.neighbors import BallTree\nimport numpy as np\n\ncities_cor_rad = np.array([[radians(x[0]), radians(x[1])] for x in cities_cor ])\ntree = BallTree(cities_cor_rad, metric = 'haversine')","user":"anonymous","dateUpdated":"2023-05-13T02:26:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682609949978_902786771","id":"20230427-153909_1989871145","dateCreated":"2023-04-27T15:39:09+0000","dateStarted":"2023-05-13T02:30:44+0000","dateFinished":"2023-05-13T02:30:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17785"},{"title":"Calculating min distance to city","text":"min_distance_start = []\nmin_distance_end = []\nearth_radius = 6371\n\nfor i in range(len(start_lat)):\n    dist_start = 1e9\n    dist_end = 1e9\n    \n    start_result = tree.query([(radians(start_lat[i]),radians(start_lng[i]))])\n    end_result = tree.query([(radians(end_lat[i]),radians(end_lng[i]))])\n            \n    min_distance_start.append((start_result[0][0] * earth_radius)[0])\n    min_distance_end.append((end_result[0][0] * earth_radius)[0])","user":"anonymous","dateUpdated":"2023-05-13T02:26:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682610003077_-417409298","id":"20230427-154003_799926649","dateCreated":"2023-04-27T15:40:03+0000","dateStarted":"2023-05-13T02:30:45+0000","dateFinished":"2023-05-13T02:31:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17786"},{"title":"Repeating pipeline of adding new column to original df","text":"distances_df = spark.createDataFrame([(float(s),float(e),) for s, e in zip(min_distance_start, min_distance_end)], ['start_dist_city', 'end_dist_city'])\ndf_balanced = df_balanced.withColumn(\"row_idx\", F.row_number().over(Window.orderBy(F.monotonically_increasing_id())))\ndistances_df = distances_df.withColumn(\"row_idx\", F.row_number().over(Window.orderBy(F.monotonically_increasing_id())))\ndf_balanced = df_balanced.join(distances_df, df_balanced.row_idx == distances_df.row_idx).\\\n             drop(\"row_idx\")","user":"anonymous","dateUpdated":"2023-05-13T02:26:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682609985013_1980899162","id":"20230427-153945_73064458","dateCreated":"2023-04-27T15:39:45+0000","dateStarted":"2023-05-13T02:30:45+0000","dateFinished":"2023-05-13T02:31:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17787"},{"text":"df_balanced.printSchema()","user":"anonymous","dateUpdated":"2023-05-13T02:26:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- severity: integer (nullable = true)\n |-- start_time: timestamp (nullable = true)\n |-- end_time: timestamp (nullable = true)\n |-- start_lat: float (nullable = true)\n |-- start_lng: float (nullable = true)\n |-- end_lat: float (nullable = true)\n |-- end_lng: float (nullable = true)\n |-- distance: float (nullable = true)\n |-- description: string (nullable = true)\n |-- number: float (nullable = true)\n |-- street: string (nullable = true)\n |-- side: string (nullable = true)\n |-- city: string (nullable = true)\n |-- county: string (nullable = true)\n |-- state: string (nullable = true)\n |-- zipcode: string (nullable = true)\n |-- country: string (nullable = true)\n |-- timezone: string (nullable = true)\n |-- airport_code: string (nullable = true)\n |-- weather_timestamp: long (nullable = true)\n |-- temperature: float (nullable = true)\n |-- wind_chill: float (nullable = true)\n |-- humidity: float (nullable = true)\n |-- pressure: float (nullable = true)\n |-- visibility: float (nullable = true)\n |-- wind_direction: string (nullable = true)\n |-- wind_speed: float (nullable = true)\n |-- precipitation: float (nullable = true)\n |-- weather_condition: string (nullable = true)\n |-- amenity: boolean (nullable = true)\n |-- bump: boolean (nullable = true)\n |-- crossing: boolean (nullable = true)\n |-- give_away: boolean (nullable = true)\n |-- junction: boolean (nullable = true)\n |-- no_exit: boolean (nullable = true)\n |-- railway: boolean (nullable = true)\n |-- roundabout: boolean (nullable = true)\n |-- station: boolean (nullable = true)\n |-- stop: boolean (nullable = true)\n |-- traffic_calming: boolean (nullable = true)\n |-- traffic_signal: boolean (nullable = true)\n |-- turning_loop: boolean (nullable = true)\n |-- sunrise_sunset: string (nullable = true)\n |-- civil_twilight: string (nullable = true)\n |-- nautical_twilight: string (nullable = true)\n |-- astronomical_twilight: string (nullable = true)\n |-- DayOfWeek: integer (nullable = true)\n |-- Hour: integer (nullable = true)\n |-- accident_duration: long (nullable = true)\n |-- accident_distance: double (nullable = true)\n |-- start_dist_city: double (nullable = true)\n |-- end_dist_city: double (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1682627707500_-1745432201","id":"20230427-203507_282671403","dateCreated":"2023-04-27T20:35:07+0000","dateStarted":"2023-05-13T02:31:42+0000","dateFinished":"2023-05-13T02:31:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17788"},{"title":"Choosing features to drop and to encode, valuable boolean and numerical features will not be included in this lists","text":"# 'number', 'street', 'city', 'county', 'zipcode', 'country' - features about region that are hard to encode because of big diversity, the only geographical feature we decided to include - state\n# 'timezone', 'airport_code', 'weather_timestamp', 'weather_condition' - features that don't seem to be useful\n# 'start_time', 'end_time' - we've already extracted features from this columns (DayOfWeek, TimeOfDay), so they could be dropped\n# 'start_lat', 'start_lng', 'end_lat', 'end_lng' - these features themselves don't give any useful info, but we've extracted distance of accident and distance to nearest city as our features\n# 'description' - we didn't manage to deal with description column, because text representation in ML model is a hard task and we've decided to limit our work with simpler data\nto_drop = ['number', 'street', 'side', 'city', 'county', 'zipcode', 'country', 'timezone', 'airport_code', 'weather_timestamp', 'weather_condition', 'start_time', 'end_time', 'start_lat', 'start_lng', 'end_lat', 'end_lng', 'description', 'id', 'wind_direction', 'severity']\n\nto_encode = ['state', 'sunrise_sunset', 'civil_twilight', 'nautical_twilight', 'astronomical_twilight']\n\nnumerical = [c for c in df_balanced.columns if c not in to_drop + to_encode]","user":"anonymous","dateUpdated":"2023-05-13T02:26:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682627808653_-1247613097","id":"20230427-203648_1563292117","dateCreated":"2023-04-27T20:36:48+0000","dateStarted":"2023-05-13T02:31:44+0000","dateFinished":"2023-05-13T02:31:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17789"},{"title":"Encoding pipeline","text":"from pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler\n\nindexers = [StringIndexer(inputCol=c, outputCol=\"{0}_indexed\".format(c)).setHandleInvalid(\"skip\") for c in to_encode]\n\nencoders = [OneHotEncoder(inputCol=indexer.getOutputCol(), outputCol=\"{0}_encoded\".format(indexer.getOutputCol())) for indexer in indexers]\n\n\nassembler = VectorAssembler(inputCols=[encoder.getOutputCol() for encoder in encoders] + numerical, outputCol= \"features\")\n\nencoding_pipeline = Pipeline(stages=indexers + encoders + [assembler])","user":"anonymous","dateUpdated":"2023-05-13T02:26:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682627461672_-1652660099","id":"20230427-203101_2039653622","dateCreated":"2023-04-27T20:31:01+0000","dateStarted":"2023-05-13T02:31:44+0000","dateFinished":"2023-05-13T02:31:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17790"},{"text":"df_balanced","user":"anonymous","dateUpdated":"2023-05-13T02:31:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[id: string, severity: int, start_time: timestamp, end_time: timestamp, start_lat: float, start_lng: float, end_lat: float, end_lng: float, distance: float, description: string, number: float, street: string, side: string, city: string, county: string, state: string, zipcode: string, country: string, timezone: string, airport_code: string, weather_timestamp: bigint, temperature: float, wind_chill: float, humidity: float, pressure: float, visibility: float, wind_direction: string, wind_speed: float, precipitation: float, weather_condition: string, amenity: boolean, bump: boolean, crossing: boolean, give_away: boolean, junction: boolean, no_exit: boolean, railway: boolean, roundabout: boolean, station: boolean, stop: boolean, traffic_calming: boolean, traffic_signal: boolean, turning_loop: boolean, sunrise_sunset: string, civil_twilight: string, nautical_twilight: string, astronomical_twilight: string, DayOfWeek: int, Hour: int, accident_duration: bigint, accident_distance: double, start_dist_city: double, end_dist_city: double]\n"}]},"apps":[],"jobName":"paragraph_1683944425178_1516989914","id":"20230513-022025_135231318","dateCreated":"2023-05-13T02:20:25+0000","dateStarted":"2023-05-13T02:31:44+0000","dateFinished":"2023-05-13T02:31:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17791"},{"title":"Transforming data using pipeline","text":"encoding_model=encoding_pipeline.fit(df_balanced)\ndata = encoding_model.transform(df_balanced)","user":"anonymous","dateUpdated":"2023-05-13T02:26:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 5:>    (0 + 8) / 8][Stage 6:>    (0 + 0) / 8][Stage 7:>    (0 + 0) / 8]\n\n[Stage 6:>                  (0 + 8) / 8][Stage 7:>                  (0 + 0) / 8]\n\n[Stage 6:==>                (1 + 7) / 8][Stage 7:>                  (0 + 1) / 8]\n\n[Stage 6:==>                (1 + 7) / 8][Stage 7:=======>           (3 + 1) / 8]\n\n[Stage 6:==>                (1 + 7) / 8][Stage 7:==============>    (6 + 1) / 8]\n\n[Stage 6:=======>                                                   (1 + 7) / 8]\n\n[Stage 6:==============>                                            (2 + 6) / 8]\n\n[Stage 6:======================>                                    (3 + 5) / 8]\n\n[Stage 6:=============================>                             (4 + 4) / 8]\n\n[Stage 6:====================================>                      (5 + 3) / 8]\n\n[Stage 6:============================================>              (6 + 2) / 8]\n\n[Stage 6:===================================================>       (7 + 1) / 8]\n\n[Stage 8:>                                                          (0 + 1) / 1]\n\n                                                                                \n\n[Stage 10:>                 (0 + 8) / 8][Stage 11:>                 (0 + 0) / 8]\n\n[Stage 10:==>               (1 + 7) / 8][Stage 11:==>               (1 + 1) / 8]\n\n[Stage 10:==>               (1 + 7) / 8][Stage 11:=========>        (4 + 1) / 8]\n\n[Stage 10:====>             (2 + 6) / 8][Stage 11:===============>  (7 + 1) / 8]\n\n[Stage 10:==============>                                           (2 + 6) / 8]\n\n[Stage 10:=============================>                            (4 + 4) / 8]\n\n[Stage 10:====================================>                     (5 + 3) / 8]\n\n[Stage 10:===========================================>              (6 + 2) / 8]\n\n[Stage 10:==================================================>       (7 + 1) / 8]\n\n                                                                                \n\n[Stage 15:>                                                         (0 + 8) / 8]\n\n[Stage 15:==============>                                           (2 + 6) / 8]\n\n[Stage 15:=====================>                                    (3 + 5) / 8]\n\n[Stage 15:=============================>                            (4 + 4) / 8]\n\n[Stage 15:====================================>                     (5 + 3) / 8]\n\n[Stage 15:===========================================>              (6 + 2) / 8]\n\n[Stage 15:==================================================>       (7 + 1) / 8]\n\n[Stage 16:>                                                         (0 + 1) / 1]\n\n                                                                                \n\n[Stage 18:>                 (0 + 8) / 8][Stage 19:>                 (0 + 0) / 8]\n\n[Stage 18:==>               (1 + 7) / 8][Stage 19:>                 (0 + 1) / 8]\n\n[Stage 18:====>             (2 + 6) / 8][Stage 19:===========>      (5 + 2) / 8]\n\n[Stage 18:==============>                                           (2 + 6) / 8]\n\n[Stage 18:=====================>                                    (3 + 5) / 8]\n\n[Stage 18:=============================>                            (4 + 4) / 8]\n\n[Stage 18:===========================================>              (6 + 2) / 8]\n\n[Stage 18:==================================================>       (7 + 1) / 8]\n\n                                                                                \n\n[Stage 23:>                                                         (0 + 8) / 8]\n\n[Stage 23:=======>                                                  (1 + 7) / 8]\n\n[Stage 23:==============>                                           (2 + 6) / 8]\n\n[Stage 23:=============================>                            (4 + 4) / 8]\n\n[Stage 23:===========================================>              (6 + 2) / 8]\n\n[Stage 23:==================================================>       (7 + 1) / 8]\n\n[Stage 24:>                                                         (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1682610609802_1981912726","id":"20230427-155009_2140986389","dateCreated":"2023-04-27T15:50:09+0000","dateStarted":"2023-05-13T02:31:44+0000","dateFinished":"2023-05-13T02:37:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17792"},{"title":"Extracting only vector of features and target","text":"data = data.select([\"features\", \"severity\"])","user":"anonymous","dateUpdated":"2023-05-13T02:26:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"editOnDblClick":false,"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1682635618273_-1122447184","id":"20230427-224658_1995824192","dateCreated":"2023-04-27T22:46:58+0000","dateStarted":"2023-05-13T02:31:45+0000","dateFinished":"2023-05-13T02:37:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17793"},{"text":"data.show()","user":"anonymous","dateUpdated":"2023-05-13T02:26:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 25:>   (0 + 8) / 8][Stage 26:>   (0 + 0) / 8][Stage 27:>   (0 + 0) / 8]\n\n[Stage 25:>   (1 + 7) / 8][Stage 26:>   (0 + 1) / 8][Stage 27:>   (0 + 0) / 8]\n\n[Stage 25:>   (1 + 7) / 8][Stage 26:>   (1 + 1) / 8][Stage 27:>   (0 + 0) / 8]\n\n[Stage 25:>   (1 + 7) / 8][Stage 26:===>(6 + 1) / 8][Stage 27:>   (0 + 0) / 8]\n\n[Stage 25:====>             (2 + 6) / 8][Stage 27:====>             (2 + 2) / 8]\n\n[Stage 25:==============>                                           (2 + 6) / 8]\n\n[Stage 25:=====================>                                    (3 + 5) / 8]\n\n[Stage 25:=============================>                            (4 + 4) / 8]\n\n[Stage 25:===========================================>              (6 + 2) / 8]\n\n[Stage 25:==================================================>       (7 + 1) / 8]\n\n[Stage 28:>                                                         (0 + 1) / 1]\n\n                                                                                \n+--------------------+--------+\n|            features|severity|\n+--------------------+--------+\n|(79,[21,49,50,51,...|       4|\n|(79,[21,49,50,51,...|       4|\n|(79,[20,51,52,53,...|       4|\n|(79,[2,49,50,51,5...|       3|\n|(79,[21,52,53,54,...|       4|\n|(79,[21,48,49,50,...|       4|\n|(79,[21,48,49,50,...|       4|\n|(79,[21,51,52,53,...|       4|\n|(79,[21,51,52,53,...|       4|\n|(79,[20,48,49,50,...|       4|\n|(79,[20,48,49,50,...|       4|\n|(79,[20,48,49,50,...|       4|\n|(79,[20,48,49,50,...|       3|\n|(79,[21,50,51,52,...|       3|\n|(79,[20,49,50,51,...|       4|\n|(79,[20,49,50,51,...|       4|\n|(79,[20,51,52,53,...|       4|\n|(79,[1,48,49,50,5...|       4|\n|(79,[1,48,49,50,5...|       4|\n|(79,[1,48,49,50,5...|       4|\n+--------------------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1683923775669_2103005688","id":"20230512-203615_547383019","dateCreated":"2023-05-12T20:36:15+0000","dateStarted":"2023-05-13T02:37:38+0000","dateFinished":"2023-05-13T02:38:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17794"},{"title":"Indexing feature vector","text":"from pyspark.ml.feature import VectorIndexer\n\nfeatureIndexer = VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=4).fit(data)\ntransformed = featureIndexer.transform(data)\n\n(trainingData, testData) = transformed.randomSplit([0.6, 0.4])","user":"anonymous","dateUpdated":"2023-05-13T02:37:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 31:>                                                         (0 + 8) / 8]\n\n[Stage 31:=======>                                                  (1 + 7) / 8]\n\n[Stage 31:==============>                                           (2 + 6) / 8]\n\n[Stage 31:=====================>                                    (3 + 5) / 8]\n\n[Stage 31:=============================>                            (4 + 4) / 8]\n\n[Stage 31:===========================================>              (6 + 2) / 8]\n\n[Stage 32:>                                                         (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683926540278_-1742407972","id":"20230512-212220_1993067111","dateCreated":"2023-05-12T21:22:20+0000","dateStarted":"2023-05-13T02:37:39+0000","dateFinished":"2023-05-13T02:40:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17795"},{"title":"Classification models initialization and fitting them on training data","text":"# DecisionTreeClassifier and RandomForestClassifier were chosen\nfrom pyspark.ml.classification import DecisionTreeClassifier, RandomForestClassifier\n\nDT_classifier = DecisionTreeClassifier(labelCol=\"severity\")\nRF_classifier = RandomForestClassifier(labelCol=\"severity\")\n\nDT_model = DT_classifier.fit(trainingData)\nRF_model = RF_classifier.fit(trainingData)\n\nDT_model.write().overwrite().save(\"DecisionTreeClassifier_model\")\nRF_model.write().overwrite().save(\"GBTClassifier_model\")","user":"anonymous","dateUpdated":"2023-05-13T03:13:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 229:>                                                        (0 + 8) / 8]\n\n[Stage 229:=======>                                                 (1 + 7) / 8]\n\n[Stage 229:==============>                                          (2 + 6) / 8]\n\n[Stage 229:=====================>                                   (3 + 5) / 8]\n\n[Stage 229:============================>                            (4 + 4) / 8]\n\n[Stage 229:===================================>                     (5 + 3) / 8]\n\n[Stage 229:==========================================>              (6 + 2) / 8]\n\n[Stage 229:=================================================>       (7 + 1) / 8]\n\n[Stage 230:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 233:>                                                        (0 + 8) / 8]\n\n[Stage 233:=======>                                                 (1 + 7) / 8]\n\n[Stage 233:==============>                                          (2 + 6) / 8]\n\n[Stage 233:=====================>                                   (3 + 5) / 8]\n\n[Stage 233:============================>                            (4 + 4) / 8]\n\n[Stage 233:===================================>                     (5 + 3) / 8]\n\n[Stage 233:==========================================>              (6 + 2) / 8]\n\n[Stage 234:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 238:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 242:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 247:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 271:>                                                        (0 + 8) / 8]\n\n[Stage 271:=======>                                                 (1 + 7) / 8]\n\n[Stage 271:==============>                                          (2 + 6) / 8]\n\n[Stage 271:=====================>                                   (3 + 5) / 8]\n\n[Stage 271:============================>                            (4 + 4) / 8]\n\n[Stage 271:===================================>                     (5 + 3) / 8]\n\n[Stage 271:==========================================>              (6 + 2) / 8]\n\n[Stage 271:=================================================>       (7 + 1) / 8]\n\n[Stage 272:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 274:>                (0 + 8) / 8][Stage 275:>                (0 + 0) / 8]\n\n[Stage 274:====>            (2 + 6) / 8][Stage 275:==========>      (5 + 2) / 8]\n\n[Stage 274:==============>                                          (2 + 6) / 8]\n\n[Stage 274:=====================>                                   (3 + 5) / 8]\n\n[Stage 274:============================>                            (4 + 4) / 8]\n\n[Stage 274:===================================>                     (5 + 3) / 8]\n\n[Stage 274:==========================================>              (6 + 2) / 8]\n\n[Stage 274:=================================================>       (7 + 1) / 8]\n\n[Stage 276:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 280:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 284:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 289:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 294:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 299:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 304:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 309:>                                                        (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683933066842_-1505392627","id":"20230512-231106_1605804989","dateCreated":"2023-05-12T23:11:06+0000","dateStarted":"2023-05-13T03:02:32+0000","dateFinished":"2023-05-13T03:07:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17796"},{"title":"Applying trained models on test data","text":"DT_predictions = DT_model.transform(testData)\nRF_predictions = RF_model.transform(testData)","user":"anonymous","dateUpdated":"2023-05-13T03:13:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1683933062069_1768066340","id":"20230512-231102_683133000","dateCreated":"2023-05-12T23:11:02+0000","dateStarted":"2023-05-13T03:09:49+0000","dateFinished":"2023-05-13T03:09:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17797"},{"title":"Evaluating models using f1 score","text":"from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nevaluator = MulticlassClassificationEvaluator().setLabelCol(\"severity\").setPredictionCol(\"prediction\").setMetricName(\"f1\")\n\nDT_f1 = evaluator.evaluate(DT_predictions)\nRF_f1 = evaluator.evaluate(RF_predictions)","user":"anonymous","dateUpdated":"2023-05-13T03:13:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 317:>                (0 + 8) / 8][Stage 318:>                (0 + 0) / 8]\n\n[Stage 317:==>              (1 + 7) / 8][Stage 318:====>            (2 + 1) / 8]\n\n[Stage 317:==>              (1 + 7) / 8][Stage 318:==============>  (7 + 1) / 8]\n\n[Stage 317:=======>                                                 (1 + 7) / 8]\n\n[Stage 317:==============>                                          (2 + 6) / 8]\n\n[Stage 317:=====================>                                   (3 + 5) / 8]\n\n[Stage 317:============================>                            (4 + 4) / 8]\n\n[Stage 317:===================================>                     (5 + 3) / 8]\n\n[Stage 317:==========================================>              (6 + 2) / 8]\n\n[Stage 317:=================================================>       (7 + 1) / 8]\n\n[Stage 319:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 321:>  (0 + 8) / 8][Stage 322:>  (0 + 0) / 8][Stage 323:>  (0 + 0) / 8]\n\n[Stage 321:>  (1 + 7) / 8][Stage 322:>  (0 + 1) / 8][Stage 323:>  (0 + 0) / 8]\n\n[Stage 321:>  (1 + 7) / 8][Stage 322:=> (4 + 1) / 8][Stage 323:>  (0 + 0) / 8]\n\n[Stage 321:>  (1 + 7) / 8][Stage 322:==>(7 + 1) / 8][Stage 323:>  (0 + 0) / 8]\n\n[Stage 321:====>            (2 + 6) / 8][Stage 323:============>    (6 + 2) / 8]\n\n[Stage 321:==============>                                          (2 + 6) / 8]\n\n[Stage 321:=====================>                                   (3 + 5) / 8]\n\n[Stage 321:============================>                            (4 + 4) / 8]\n\n[Stage 321:==========================================>              (6 + 2) / 8]\n\n[Stage 321:=================================================>       (7 + 1) / 8]\n\n[Stage 324:>                                                        (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683933192814_622050963","id":"20230512-231312_992134556","dateCreated":"2023-05-12T23:13:12+0000","dateStarted":"2023-05-13T03:10:03+0000","dateFinished":"2023-05-13T03:12:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17798"},{"title":"Printing scores","text":"print(\"DecisionTreeClassifier f1 score:\", DT_f1)\nprint(\"RandomForestClassifier f1 score:\", RF_f1)","user":"anonymous","dateUpdated":"2023-05-13T03:13:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('DecisionTreeClassifier f1 score:', 0.7231424779214289)\n('RandomForestClassifier f1 score:', 0.6662014750820551)\n"}]},"apps":[],"jobName":"paragraph_1683933230183_-2013833103","id":"20230512-231350_1658165824","dateCreated":"2023-05-12T23:13:50+0000","dateStarted":"2023-05-13T03:10:57+0000","dateFinished":"2023-05-13T03:12:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17799"},{"text":"RF_model","user":"anonymous","dateUpdated":"2023-05-13T03:14:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RandomForestClassificationModel: uid=RandomForestClassifier_d2dbd467ed1c, numTrees=20, numClasses=5, numFeatures=79\n"}]},"apps":[],"jobName":"paragraph_1683947646372_-1451817672","id":"20230513-031406_641842291","dateCreated":"2023-05-13T03:14:06+0000","dateStarted":"2023-05-13T03:14:15+0000","dateFinished":"2023-05-13T03:14:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17800"},{"title":"Decision tree model parameter tuning","text":"from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n\nDT_grid = ParamGridBuilder().addGrid(DT_model.maxDepth, [5, 7, 10]).addGrid(DT_model.maxBins, [16, 32, 64])\nDT_grid = DT_grid.build()\n\nDT_cv = CrossValidator(estimator = DT_classifier, estimatorParamMaps = DT_grid, evaluator = evaluator, parallelism = 5, numFolds=3)\n                    \nDT_cvModel = DT_cv.fit(trainingData)","user":"anonymous","dateUpdated":"2023-05-13T03:35:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"... \n[Stage 328:>                                                        (0 + 8) / 8]\n\n[Stage 328:=======>                                                 (1 + 7) / 8]\n\n[Stage 328:==============>                                          (2 + 6) / 8]\n\n[Stage 328:=====================>                                   (3 + 5) / 8]\n\n[Stage 328:============================>                            (4 + 4) / 8]\n\n[Stage 328:===================================>                     (5 + 3) / 8]\n\n[Stage 328:==========================================>              (6 + 2) / 8]\n\n[Stage 329:>  (0 + 1) / 1][Stage 330:>  (0 + 1) / 1][Stage 331:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 413:>  (0 + 8) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:>  (1 + 7) / 8][Stage 414:=> (3 + 1) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:>  (1 + 7) / 8][Stage 414:==>(7 + 1) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:>  (1 + 7) / 8][Stage 415:==>(7 + 1) / 8][Stage 425:>  (0 + 0) / 1]\n\n[Stage 413:==>              (1 + 7) / 8][Stage 425:>                (0 + 1) / 1]\n\n                                                                                \n\n[Stage 413:>  (2 + 6) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:=> (3 + 5) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:=> (4 + 4) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:=> (5 + 3) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:==>(6 + 2) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 413:==>(7 + 1) / 8][Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8]\n\n[Stage 414:>                (0 + 0) / 8][Stage 415:>                (0 + 0) / 8]\n\n[Stage 414:>  (0 + 0) / 8][Stage 415:>  (0 + 0) / 8][Stage 416:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 549:>                (0 + 8) / 8][Stage 550:>                (0 + 0) / 8]\n\n[Stage 549:==>              (1 + 7) / 8][Stage 550:====>            (2 + 1) / 8]\n\n[Stage 549:=======>                                                 (1 + 7) / 8]\n\n[Stage 549:==============>                                          (2 + 6) / 8]\n\n[Stage 549:=====================>                                   (3 + 5) / 8]\n\n[Stage 549:============================>                            (4 + 4) / 8]\n\n[Stage 549:===================================>                     (5 + 3) / 8]\n\n[Stage 549:==========================================>              (6 + 2) / 8]\n\n[Stage 551:>  (0 + 1) / 1][Stage 552:>  (0 + 1) / 1][Stage 553:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:>  (0 + 8) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:>  (1 + 7) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:>  (2 + 6) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:=> (4 + 4) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:=> (5 + 3) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:==>(6 + 2) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 639:==>(7 + 1) / 8]\n\n[Stage 637:>                (0 + 0) / 8][Stage 638:>                (0 + 0) / 8]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 640:>  (0 + 1) / 1]\n\n[Stage 637:>  (0 + 0) / 8][Stage 638:>  (0 + 0) / 8][Stage 642:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 772:>                                                        (0 + 8) / 8]\n\n[Stage 772:=======>                                                 (1 + 7) / 8]\n\n[Stage 772:==============>                                          (2 + 6) / 8]\n\n[Stage 772:============================>                            (4 + 4) / 8]\n\n[Stage 772:==========================================>              (6 + 2) / 8]\n\n[Stage 773:>  (0 + 1) / 1][Stage 774:>  (0 + 1) / 1][Stage 775:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 859:>  (0 + 8) / 8][Stage 860:>  (0 + 0) / 8][Stage 861:>  (0 + 0) / 8]\n\n[Stage 859:>  (1 + 7) / 8][Stage 860:>  (2 + 1) / 8][Stage 861:>  (0 + 0) / 8]\n\n[Stage 859:==>              (1 + 7) / 8][Stage 861:>                (0 + 1) / 8]\n\n[Stage 859:==>              (1 + 7) / 8][Stage 861:======>          (3 + 1) / 8]\n\n[Stage 859:====>            (2 + 6) / 8][Stage 861:============>    (6 + 2) / 8]\n\n[Stage 859:==============>                                          (2 + 6) / 8]\n\n[Stage 859:============================>                            (4 + 4) / 8]\n\n[Stage 859:===================================>                     (5 + 3) / 8]\n\n[Stage 859:==========================================>              (6 + 2) / 8]\n\n[Stage 859:=================================================>       (7 + 1) / 8]\n\n[Stage 862:>  (0 + 1) / 1][Stage 864:>  (0 + 1) / 1][Stage 866:>  (0 + 1) / 1]\n\n                                                                                \n\n[Stage 993:>                (0 + 8) / 8][Stage 994:>                (0 + 0) / 8]\n\n[Stage 993:==>              (1 + 7) / 8][Stage 994:======>          (3 + 1) / 8]\n\n[Stage 993:=======>                                                 (1 + 7) / 8]\n\n[Stage 993:==============>                                          (2 + 6) / 8]\n\n[Stage 993:============================>                            (4 + 4) / 8]\n\n[Stage 993:==========================================>              (6 + 2) / 8]\n\n[Stage 993:=================================================>       (7 + 1) / 8]\n\n[Stage 995:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 998:>                                                        (0 + 8) / 8]\n\n[Stage 998:=======>                                                 (1 + 7) / 8]\n\n[Stage 998:==============>                                          (2 + 6) / 8]\n\n[Stage 998:=====================>                                   (3 + 5) / 8]\n\n[Stage 998:============================>                            (4 + 4) / 8]\n\n[Stage 998:===================================>                     (5 + 3) / 8]\n\n[Stage 998:==========================================>              (6 + 2) / 8]\n\n[Stage 999:>                                                        (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1003:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1007:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1012:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683935631165_1598810164","id":"20230512-235351_487340510","dateCreated":"2023-05-12T23:53:51+0000","dateStarted":"2023-05-13T03:24:02+0000","dateFinished":"2023-05-13T03:33:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17801"},{"text":"RF_grid = ParamGridBuilder().addGrid(RF_model.numTrees, [10, 20, 30]).addGrid(RF_model.maxDepth, [5, 7, 10])\nRF_grid = RF_grid.build()\n\nRF_cv = CrossValidator(estimator = RF_classifier, estimatorParamMaps = RF_grid, evaluator = evaluator, parallelism = 5, numFolds=3)\n                    \nRF_cvModel = RF_cv.fit(trainingData)","user":"anonymous","dateUpdated":"2023-05-13T03:40:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"... \n[Stage 1482:>               (0 + 1) / 1][Stage 1484:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1488:>               (0 + 1) / 1][Stage 1490:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1507:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1512:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1517:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1526:>                                                       (0 + 8) / 8]\n\n[Stage 1526:=======>                                                (1 + 7) / 8]\n\n[Stage 1526:==============>                                         (2 + 6) / 8]\n\n[Stage 1526:=====================>                                  (3 + 5) / 8]\n\n[Stage 1526:============================>                           (4 + 4) / 8]\n\n[Stage 1526:===================================>                    (5 + 3) / 8]\n\n[Stage 1526:==========================================>             (6 + 2) / 8]\n\n[Stage 1526:=================================================>      (7 + 1) / 8]\n\n[Stage 1527:> (0 + 1) / 1][Stage 1528:> (0 + 1) / 1][Stage 1529:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1606:> (0 + 8) / 8][Stage 1607:> (0 + 0) / 8][Stage 1610:> (0 + 0) / 1]\n\n[Stage 1606:> (1 + 7) / 8][Stage 1607:> (3 + 1) / 8][Stage 1610:> (0 + 0) / 1]\n\n[Stage 1606:> (1 + 7) / 8][Stage 1607:=>(7 + 1) / 8][Stage 1610:> (0 + 0) / 1]\n\n[Stage 1606:> (2 + 6) / 8][Stage 1610:> (0 + 1) / 1][Stage 1612:> (0 + 1) / 1]\n\n[Stage 1606:> (2 + 6) / 8][Stage 1612:> (0 + 1) / 1][Stage 1614:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:> (2 + 6) / 8][Stage 1607:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:> (2 + 6) / 8][Stage 1607:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:> (2 + 6) / 8][Stage 1607:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:> (2 + 6) / 8][Stage 1607:> (0 + 0) / 8]\n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:=>(4 + 4) / 8][Stage 1607:> (0 + 0) / 8]\n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:=>(5 + 3) / 8][Stage 1607:> (0 + 0) / 8]\n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:=>(6 + 2) / 8][Stage 1607:> (0 + 0) / 8]\n\n[Stage 1605:> (0 + 0) / 8][Stage 1606:=>(7 + 1) / 8][Stage 1607:> (0 + 0) / 8]\n\n[Stage 1605:>               (0 + 0) / 8][Stage 1607:>               (0 + 0) / 8]\n\n[Stage 1605:> (0 + 0) / 8][Stage 1607:> (0 + 0) / 8][Stage 1608:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1665:> (0 + 1) / 1][Stage 1667:> (0 + 1) / 1][Stage 1669:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1695:>               (0 + 1) / 1][Stage 1697:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1701:> (0 + 1) / 1][Stage 1703:> (0 + 1) / 1][Stage 1705:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1709:>               (0 + 1) / 1][Stage 1713:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1720:>               (0 + 1) / 1][Stage 1722:>               (0 + 1) / 1]\n\n[Stage 1722:>               (0 + 1) / 1][Stage 1724:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1743:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1748:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1756:>               (0 + 8) / 8][Stage 1757:>               (0 + 0) / 8]\n\n[Stage 1756:==>             (1 + 7) / 8][Stage 1757:>               (0 + 1) / 8]\n\n[Stage 1756:==>             (1 + 7) / 8][Stage 1757:============>   (6 + 1) / 8]\n\n[Stage 1756:=======>                                                (1 + 7) / 8]\n\n[Stage 1756:==============>                                         (2 + 6) / 8]\n\n[Stage 1756:=====================>                                  (3 + 5) / 8]\n\n[Stage 1756:============================>                           (4 + 4) / 8]\n\n[Stage 1756:===================================>                    (5 + 3) / 8]\n\n[Stage 1756:==========================================>             (6 + 2) / 8]\n\n[Stage 1756:=================================================>      (7 + 1) / 8]\n\n[Stage 1758:> (0 + 1) / 1][Stage 1759:> (0 + 1) / 1][Stage 1760:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1831:> (0 + 0) / 1][Stage 1832:> (0 + 1) / 1][Stage 1834:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1836:> (0 + 8) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:> (1 + 7) / 8][Stage 1837:=>(5 + 1) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:> (1 + 7) / 8][Stage 1838:=>(5 + 1) / 8][Stage 1841:> (0 + 0) / 1]\n\n[Stage 1836:> (1 + 7) / 8][Stage 1841:> (0 + 1) / 1][Stage 1843:> (0 + 0) / 1]\n\n[Stage 1836:> (1 + 7) / 8][Stage 1843:> (0 + 1) / 1][Stage 1845:> (0 + 0) / 1]\n\n                                                                                \n\n[Stage 1836:> (2 + 6) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1836:> (2 + 6) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1836:> (2 + 6) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n                                                                                \n\n[Stage 1836:> (2 + 6) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:> (3 + 5) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:=>(4 + 4) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:=>(6 + 2) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1836:=>(7 + 1) / 8][Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8]\n\n[Stage 1837:>               (0 + 0) / 8][Stage 1838:>               (0 + 0) / 8]\n\n[Stage 1837:> (0 + 0) / 8][Stage 1838:> (0 + 0) / 8][Stage 1839:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1896:> (0 + 1) / 1][Stage 1898:> (0 + 1) / 1][Stage 1900:> (0 + 1) / 1]\n\n[Stage 1896:> (0 + 1) / 1][Stage 1900:> (0 + 1) / 1][Stage 1902:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1914:> (0 + 1) / 1][Stage 1916:> (0 + 1) / 1][Stage 1918:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1932:> (0 + 1) / 1][Stage 1934:> (0 + 1) / 1][Stage 1936:> (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1940:>               (0 + 1) / 1][Stage 1949:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1953:>               (0 + 1) / 1][Stage 1955:>               (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1974:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1979:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1987:>               (0 + 8) / 8][Stage 1988:>               (0 + 0) / 8]\n\n[Stage 1987:==>             (1 + 7) / 8][Stage 1988:====>           (2 + 1) / 8]\n\n[Stage 1987:=======>                                                (1 + 7) / 8]\n\n[Stage 1987:==============>                                         (2 + 6) / 8]\n\n[Stage 1987:=====================>                                  (3 + 5) / 8]\n\n[Stage 1987:============================>                           (4 + 4) / 8]\n\n[Stage 1987:===================================>                    (5 + 3) / 8]\n\n[Stage 1987:==========================================>             (6 + 2) / 8]\n\n[Stage 1987:=================================================>      (7 + 1) / 8]\n\n[Stage 1989:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1992:>                                                       (0 + 8) / 8]\n\n[Stage 1992:=======>                                                (1 + 7) / 8]\n\n[Stage 1992:==============>                                         (2 + 6) / 8]\n\n[Stage 1992:=====================>                                  (3 + 5) / 8]\n\n[Stage 1992:============================>                           (4 + 4) / 8]\n\n[Stage 1992:===================================>                    (5 + 3) / 8]\n\n[Stage 1992:==========================================>             (6 + 2) / 8]\n\n[Stage 1992:=================================================>      (7 + 1) / 8]\n\n[Stage 1993:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 1997:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2001:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2006:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2011:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2016:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2021:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2026:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2031:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2036:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2041:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2046:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2051:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683934715115_675090472","id":"20230512-233835_1389258769","dateCreated":"2023-05-12T23:38:35+0000","dateStarted":"2023-05-13T03:40:16+0000","dateFinished":"2023-05-13T03:48:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17802"},{"text":"DT_bestModel = DT_cvModel.bestModel\nRF_bestModel = RF_cvModel.bestModel","user":"anonymous","dateUpdated":"2023-05-13T03:41:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1683948953959_1165701306","id":"20230513-033553_1528740493","dateCreated":"2023-05-13T03:35:53+0000","dateStarted":"2023-05-13T03:41:36+0000","dateFinished":"2023-05-13T03:48:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17803"},{"text":"DT_predictions = DT_bestModel.transform(testData)\nDT_f1 = evaluator.evaluate(DT_predictions)\n\nRF_predictions = RF_bestModel.transform(testData)\nRF_f1 = evaluator.evaluate(RF_predictions)","user":"anonymous","dateUpdated":"2023-05-13T03:49:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 2053:> (0 + 8) / 8][Stage 2054:> (0 + 0) / 8][Stage 2055:> (0 + 0) / 8]\n\n[Stage 2053:> (1 + 7) / 8][Stage 2054:> (0 + 1) / 8][Stage 2055:> (0 + 0) / 8]\n\n[Stage 2053:> (1 + 7) / 8][Stage 2054:=>(4 + 1) / 8][Stage 2055:> (0 + 0) / 8]\n\n[Stage 2053:====>           (2 + 6) / 8][Stage 2055:======>         (3 + 2) / 8]\n\n[Stage 2053:==============>                                         (2 + 6) / 8]\n\n[Stage 2053:=====================>                                  (3 + 5) / 8]\n\n[Stage 2053:============================>                           (4 + 4) / 8]\n\n[Stage 2053:==========================================>             (6 + 2) / 8]\n\n[Stage 2053:=================================================>      (7 + 1) / 8]\n\n[Stage 2056:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2060:>                                                       (0 + 8) / 8]\n\n[Stage 2060:=======>                                                (1 + 7) / 8]\n\n[Stage 2060:==============>                                         (2 + 6) / 8]\n\n[Stage 2060:=====================>                                  (3 + 5) / 8]\n\n[Stage 2060:============================>                           (4 + 4) / 8]\n\n[Stage 2060:===================================>                    (5 + 3) / 8]\n\n[Stage 2060:==========================================>             (6 + 2) / 8]\n\n[Stage 2060:=================================================>      (7 + 1) / 8]\n\n[Stage 2061:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683935625440_538826944","id":"20230512-235345_998515888","dateCreated":"2023-05-12T23:53:45+0000","dateStarted":"2023-05-13T03:49:45+0000","dateFinished":"2023-05-13T03:51:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17804"},{"text":"print(\"Tuned DecisionTreeClassifier f1 score:\", DT_f1)\nprint(\"Tuned RandomForestClassifier f1 score:\", RF_f1)","user":"anonymous","dateUpdated":"2023-05-13T04:01:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Tuned DecisionTreeClassifier f1 score:', 0.773183146357127)\n('Tuned RandomForestClassifier f1 score:', 0.7682111899384734)\n"}]},"apps":[],"jobName":"paragraph_1683937015155_937591","id":"20230513-001655_1888638155","dateCreated":"2023-05-13T00:16:55+0000","dateStarted":"2023-05-13T04:01:23+0000","dateFinished":"2023-05-13T04:01:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17805"},{"text":"acc_evaluator = MulticlassClassificationEvaluator().setLabelCol(\"severity\").setPredictionCol(\"prediction\").setMetricName(\"accuracy\")","user":"anonymous","dateUpdated":"2023-05-13T04:07:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1683937323807_-1034995272","id":"20230513-002203_1929156350","dateCreated":"2023-05-13T00:22:03+0000","dateStarted":"2023-05-13T04:07:20+0000","dateFinished":"2023-05-13T04:07:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17806"},{"text":"DT_acc = acc_evaluator.evaluate(DT_predictions)\nRF_acc = acc_evaluator.evaluate(RF_predictions)","user":"anonymous","dateUpdated":"2023-05-13T04:08:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 2065:>                                                       (0 + 8) / 8]\n\n[Stage 2065:=======>                                                (1 + 7) / 8]\n\n[Stage 2065:==============>                                         (2 + 6) / 8]\n\n[Stage 2065:=====================>                                  (3 + 5) / 8]\n\n[Stage 2065:============================>                           (4 + 4) / 8]\n\n[Stage 2065:===================================>                    (5 + 3) / 8]\n\n[Stage 2065:==========================================>             (6 + 2) / 8]\n\n[Stage 2066:>                                                       (0 + 1) / 1]\n\n                                                                                \n\n[Stage 2070:>                                                       (0 + 8) / 8]\n\n[Stage 2070:=======>                                                (1 + 7) / 8]\n\n[Stage 2070:==============>                                         (2 + 6) / 8]\n\n[Stage 2070:=====================>                                  (3 + 5) / 8]\n\n[Stage 2070:============================>                           (4 + 4) / 8]\n\n[Stage 2070:===================================>                    (5 + 3) / 8]\n\n[Stage 2070:==========================================>             (6 + 2) / 8]\n\n[Stage 2070:=================================================>      (7 + 1) / 8]\n\n[Stage 2071:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683950840396_1478214816","id":"20230513-040720_1526158671","dateCreated":"2023-05-13T04:07:20+0000","dateStarted":"2023-05-13T04:08:15+0000","dateFinished":"2023-05-13T04:10:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17807"},{"text":"print(\"Tuned DecisionTreeClassifier accuracy:\", DT_acc)\nprint(\"Tuned RandomForestClassifier accuracy:\", RF_acc)","user":"anonymous","dateUpdated":"2023-05-13T04:08:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"('Tuned DecisionTreeClassifier accuracy:', 0.773805788215984)\n('Tuned RandomForestClassifier accuracy:', 0.7743850925680079)\n"}]},"apps":[],"jobName":"paragraph_1683950895337_-772673519","id":"20230513-040815_2001489130","dateCreated":"2023-05-13T04:08:15+0000","dateStarted":"2023-05-13T04:08:43+0000","dateFinished":"2023-05-13T04:10:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17808"},{"text":"RF_predictions.coalesce(1).select(\"prediction\",'severity').write.mode(\"overwrite\").format(\"csv\").option(\"sep\", \",\").option(\"header\",\"true\").csv(\"/RF_predictions.csv\")","user":"anonymous","dateUpdated":"2023-05-13T04:20:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 2089:> (0 + 8) / 8][Stage 2090:> (0 + 0) / 8][Stage 2091:> (0 + 0) / 8]\n\n[Stage 2089:> (1 + 7) / 8][Stage 2090:> (1 + 1) / 8][Stage 2091:> (0 + 0) / 8]\n\n[Stage 2089:> (1 + 7) / 8][Stage 2090:=>(5 + 1) / 8][Stage 2091:> (0 + 0) / 8]\n\n[Stage 2089:====>           (2 + 6) / 8][Stage 2091:====>           (2 + 2) / 8]\n\n[Stage 2089:==============>                                         (2 + 6) / 8]\n\n[Stage 2089:=====================>                                  (3 + 5) / 8]\n\n[Stage 2089:============================>                           (4 + 4) / 8]\n\n[Stage 2089:===================================>                    (5 + 3) / 8]\n\n[Stage 2089:==========================================>             (6 + 2) / 8]\n\n[Stage 2089:=================================================>      (7 + 1) / 8]\n\n[Stage 2092:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683951165418_-975468482","id":"20230513-041245_472265072","dateCreated":"2023-05-13T04:12:45+0000","dateStarted":"2023-05-13T04:20:09+0000","dateFinished":"2023-05-13T04:21:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17809"},{"text":"DT_predictions.coalesce(1).select(\"prediction\",'severity').write.mode(\"overwrite\").format(\"csv\").option(\"sep\", \",\").option(\"header\",\"true\").csv(\"/DT_predictions.csv\")","user":"anonymous","dateUpdated":"2023-05-13T04:20:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n[Stage 2095:>                                                       (0 + 8) / 8]\n\n[Stage 2095:=======>                                                (1 + 7) / 8]\n\n[Stage 2095:==============>                                         (2 + 6) / 8]\n\n[Stage 2095:=====================>                                  (3 + 5) / 8]\n\n[Stage 2095:============================>                           (4 + 4) / 8]\n\n[Stage 2095:===================================>                    (5 + 3) / 8]\n\n[Stage 2095:==========================================>             (6 + 2) / 8]\n\n[Stage 2095:=================================================>      (7 + 1) / 8]\n\n[Stage 2096:>                                                       (0 + 1) / 1]\n\n                                                                                \n"}]},"apps":[],"jobName":"paragraph_1683950923812_-85096586","id":"20230513-040843_2054429491","dateCreated":"2023-05-13T04:08:43+0000","dateStarted":"2023-05-13T04:20:13+0000","dateFinished":"2023-05-13T04:22:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17810"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683951156789_2059815590","id":"20230513-041236_1962274500","dateCreated":"2023-05-13T04:12:36+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:17811"}],"name":"Preprocessing and classification","id":"2HX2S4XSE","angularObjects":{"2CHS8UYQQ:shared_process":[],"2HZW9MKX9:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}